package org.example;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.Socket;

public class SwingChat {
    private static final String DIRECCION_SERVER = "127.0.0.1";
    private static final int PUERTO = 55555;
    private JPanel mainPanel;
    private static final JFrame frameBase = new JFrame("SwingChat");
    private JButton buttonAcceder;
    private JPanel primerPanel;
    private JLabel labelNombre;
    private JTextField textFieldNombreUsuario;
    private JPanel segundoPanel;
    private JTextField textFieldChat;
    private JRadioButton radioButtonTCP;
    private JRadioButton radioButtonUDP;
    private JLabel labelConexion;
    private JButton button1;

    public SwingChat() {
        buttonAcceder.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (radioButtonTCP.isSelected()) {
                    System.out.println(textFieldNombreUsuario.getText());
                    intentarConexionTCP(textFieldNombreUsuario.getText());
                    System.out.println("Conexión TCP");
                } else {
                    System.out.println("Conexión UDP");
                }
                primerPanel.setVisible(false);
                frameBase.setContentPane(new SwingChat().segundoPanel);
                segundoPanel.setVisible(true);
            }
        });
    }

    public static void main(String[] args) {

        frameBase.setContentPane(new SwingChat().mainPanel);
        frameBase.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frameBase.pack();
        frameBase.setLocationRelativeTo(null);
        frameBase.setResizable(false);
        frameBase.setSize(700, 400);
        frameBase.setVisible(true);

        frameBase.setContentPane(new SwingChat().primerPanel);
    }

    private void intentarConexionTCP(String texto) {
        try (Socket socket = new Socket(DIRECCION_SERVER, PUERTO);
             BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))) {
            while (true) {
                bufferedWriter.write(texto + "\n");
                bufferedWriter.flush();
                String respuesta = bufferedReader.readLine();
                if (respuesta.equals("Nombre no disponible")) {
                    System.err.println("Nombre no disponible");
                } else if (respuesta.equals("Conexión correcta")) {
                    System.out.println("Conexión correcta");
                } else {
                    System.out.println("Nombre seleccionado");
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        primerPanel = new JPanel();
        primerPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        primerPanel.setEnabled(true);
        mainPanel.add(primerPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textFieldNombreUsuario = new JTextField();
        primerPanel.add(textFieldNombreUsuario, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonAcceder = new JButton();
        buttonAcceder.setEnabled(true);
        buttonAcceder.setText("Acceder");
        primerPanel.add(buttonAcceder, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        radioButtonTCP = new JRadioButton();
        radioButtonTCP.setSelected(true);
        radioButtonTCP.setText("TCP");
        primerPanel.add(radioButtonTCP, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        radioButtonUDP = new JRadioButton();
        radioButtonUDP.setText("UDP");
        primerPanel.add(radioButtonUDP, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelNombre = new JLabel();
        labelNombre.setText("Nombre de usuario:");
        primerPanel.add(labelNombre, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        labelConexion = new JLabel();
        labelConexion.setText("Tipo de conexión:");
        primerPanel.add(labelConexion, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        segundoPanel = new JPanel();
        segundoPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(segundoPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textFieldChat = new JTextField();
        segundoPanel.add(textFieldChat, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(650, 350), null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(radioButtonUDP);
        buttonGroup.add(radioButtonTCP);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
